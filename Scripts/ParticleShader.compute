// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


struct Particle
{
    float3 position;
    float3 velocity;
    int color;
};

int resolution;
RWStructuredBuffer<Particle> particles;
int particleCount;
float attractionScale;
float friction;
float r_max;
float deltaTime;
int particleTypesCount;
StructuredBuffer<float> particleInteractions;

/*float rand(float2 co)
{
    return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}*/
float force(float x, float t)
{
    float beta = 0.3f;
    if (x < beta)
        return  x / beta - 1;
    else if (beta < x && x < 1)
    {
        float _ = 2 * x - 1 - beta;
        return t * (1 - (_ < 0 ? -_ : _) / (1 - beta));
    }
    else
        return 0;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 phantomPosition = float3(0,0,0);
    float3 pos = float3(0,0,0);
    float3 totalForce = float3(0,0,0);
    
    Particle originParticle = particles[id.x];
    Particle targetParticle;
    
    for (uint i = 0; i < particleCount; i++)
    {
        if (i == id.x) continue;
        phantomPosition = originParticle.position;
        targetParticle = particles[i];
        pos = targetParticle.position - phantomPosition;

        if ((originParticle.position.x > targetParticle.position.x)  && (-pos.x > (resolution / 2.f)))
            phantomPosition.x -= resolution;
        else if (pos.x > (resolution / 2.f))
            phantomPosition.x += resolution;
        if ((originParticle.position.y > targetParticle.position.y) && (-pos.y > (resolution / 2.f)))
            phantomPosition.y -= resolution;
        else if (pos.y > (resolution / 2.f))
            phantomPosition.y += resolution;
        pos = targetParticle.position - phantomPosition;
        float r = sqrt(pos.x * pos.x + pos.y * pos.y);
        if ((r > 0) && (r < r_max))
        {
            float t = particleInteractions[originParticle.color * particleTypesCount + targetParticle.color];
            float f = force(r / r_max, t);
            totalForce += pos / r * f;
        }
    }
    totalForce *= r_max * attractionScale;
    particles[id.x].velocity = particles[id.x].velocity * friction;
    particles[id.x].velocity = particles[id.x].velocity + totalForce * deltaTime;
    particles[id.x].position = particles[id.x].position + particles[id.x].velocity * deltaTime;

    if (particles[id.x].position.x < 0 || particles[id.x].position.x > resolution)
        particles[id.x].position.x = (particles[id.x].position.x + resolution) % resolution;
    if (particles[id.x].position.y < 0 || particles[id.x].position.y > resolution)
        particles[id.x].position.y = (particles[id.x].position.y + resolution) % resolution;
    
    

}